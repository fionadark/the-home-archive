spring:
  profiles:
    active: prod
  
  # MySQL/RDS Database Configuration for Production
  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3306}/${DB_NAME:homearchive}?useSSL=true&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME:homearchive}
    password: ${DB_PASSWORD:}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      connection-timeout: 20000
      maximum-pool-size: 20
      minimum-idle: 10
      idle-timeout: 300000
      leak-detection-threshold: 60000
      pool-name: HikariCP-Production
      auto-commit: false
  
  # JPA/Hibernate Configuration
  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: validate # Never auto-create in production
      format_sql: false
      use-new-id-generator-mappings: true
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        jdbc:
          batch_size: 50
          fetch_size: 50
        order_inserts: true
        order_updates: true
        connection:
          provider_disables_autocommit: true
        cache:
          use_second_level_cache: true
          use_query_cache: true
          region:
            factory_class: org.hibernate.cache.jcache.JCacheRegionFactory
  
  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    validate-on-migrate: true
    locations: classpath:db/migration
    table: flyway_schema_history
    
  # Mail Configuration (Production SMTP)
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 3000
          writetimeout: 5000
        debug: false

# Application Configuration
server:
  port: ${PORT:8080}
  servlet:
    context-path: /api
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true
  error:
    include-message: never
    include-binding-errors: never
    include-stacktrace: never

# JWT Configuration
jwt:
  secret: ${JWT_SECRET:}
  expiration: ${JWT_EXPIRATION:3600000} # 1 hour
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days

# External APIs Configuration
external:
  api:
    open-library:
      base-url: https://openlibrary.org
      timeout: 8000
      rate-limit: 100 # requests per minute

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      open-library:
        failure-rate-threshold: 70
        wait-duration-in-open-state: 20000
        sliding-window-size: 15
        minimum-number-of-calls: 8
  retry:
    instances:
      external-api:
        max-attempts: 3
        wait-duration: 2000
        exponential-backoff-multiplier: 2
  ratelimiter:
    instances:
      open-library:
        limit-for-period: 100
        limit-refresh-period: 60s

# Caching Configuration
spring:
  cache:
    type: jcache
    jcache:
      config: classpath:ehcache.xml

# Security Configuration
security:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:https://yourdomain.com}
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    max-age: 3600

# Logging Configuration
logging:
  level:
    com.thehomearchive.library: INFO
    org.springframework.security: WARN
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    root: WARN
  pattern:
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    console: "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: /var/log/homearchive/application.log
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 7
      total-size-cap: 100MB
      clean-history-on-start: true

# Management/Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when_authorized
      roles: ADMIN
      show-components: always
    metrics:
      enabled: true
    info:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
        step: 60s
      simple:
        enabled: false
    web:
      server:
        request:
          autotime:
            enabled: true
            percentiles: 0.5,0.95,0.99
    tags:
      application: ${spring.application.name:the-home-archive}
      environment: production
      instance: ${HOSTNAME:unknown}
  info:
    env:
      enabled: true
    git:
      mode: full
    java:
      enabled: true
    os:
      enabled: true

# Monitoring Configuration
monitoring:
  enable-request-logging: true
  slow-request-threshold: 1000

# Amazon RDS Configuration
amazon:
  rds:
    instance-class: ${RDS_INSTANCE_CLASS:db.t3.micro}
    allocated-storage: ${RDS_ALLOCATED_STORAGE:20}
    max-allocated-storage: ${RDS_MAX_ALLOCATED_STORAGE:100}
    backup-retention-period: ${RDS_BACKUP_RETENTION:7}
    multi-az: ${RDS_MULTI_AZ:false}
    storage-encrypted: ${RDS_STORAGE_ENCRYPTED:true}
    
# Performance Configuration
spring:
  task:
    execution:
      pool:
        core-size: 8
        max-size: 16
        queue-capacity: 100
    scheduling:
      pool:
        size: 4