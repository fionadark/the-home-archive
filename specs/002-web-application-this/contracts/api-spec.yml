openapi: 3.0.3
info:
  title: Dark Academia Library API
  description: RESTful API for the dark academia library web application
  version: 1.0.0
  contact:
    name: The Home Archive
    
servers:
  - url: http://localhost:8080/api/v1
    description: Development server
  - url: https://library.thehomearchive.com/api/v1
    description: Production server

security:
  - bearerAuth: []

paths:
  # Authentication endpoints
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify-email:
    post:
      tags: [Authentication]
      summary: Verify email address
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailVerificationRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  # Book endpoints
  /books:
    get:
      tags: [Books]
      summary: Search and list books
      parameters:
        - name: q
          in: query
          description: Search query (title, author, ISBN)
          schema:
            type: string
        - name: category
          in: query
          description: Filter by category ID
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Page number (0-based)
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: sort
          in: query
          description: Sort criteria
          schema:
            type: string
            enum: [title, author, publicationYear, rating]
            default: title
        - name: direction
          in: query
          description: Sort direction
          schema:
            type: string
            enum: [asc, desc]
            default: asc
      responses:
        '200':
          description: Books retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookPageResponse'

  /books/{id}:
    get:
      tags: [Books]
      summary: Get book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetailResponse'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Book ratings endpoints
  /books/{id}/ratings:
    post:
      tags: [Ratings]
      summary: Rate a book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRatingRequest'
      responses:
        '201':
          description: Rating created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookRatingResponse'
        '409':
          description: User already rated this book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags: [Ratings]
      summary: Get book ratings
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Ratings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingPageResponse'

  # Categories endpoints
  /categories:
    get:
      tags: [Categories]
      summary: List all categories
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'

  /categories/{id}/books:
    get:
      tags: [Categories]
      summary: Get books in category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Books in category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookPageResponse'

  # User profile endpoints
  /users/profile:
    get:
      tags: [Users]
      summary: Get current user profile
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'

    put:
      tags: [Users]
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdateRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'

  /users/ratings:
    get:
      tags: [Users]
      summary: Get current user's ratings
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: User ratings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingPageResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Request schemas
    UserRegistrationRequest:
      type: object
      required: [email, password, firstName, lastName]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        rememberMe:
          type: boolean
          default: false

    RefreshTokenRequest:
      type: object
      required: [refreshToken]
      properties:
        refreshToken:
          type: string

    EmailVerificationRequest:
      type: object
      required: [token]
      properties:
        token:
          type: string

    BookRatingRequest:
      type: object
      required: [rating]
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        review:
          type: string
          maxLength: 2000

    UserProfileUpdateRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
        lastName:
          type: string
          minLength: 1

    # Response schemas
    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        details:
          type: array
          items:
            type: string
        timestamp:
          type: string
          format: date-time

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          description: Access token expiration in seconds
        user:
          $ref: '#/components/schemas/UserProfileResponse'

    BookResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        description:
          type: string
        publicationYear:
          type: integer
        publisher:
          type: string
        pageCount:
          type: integer
        category:
          $ref: '#/components/schemas/CategoryResponse'
        coverImageUrl:
          type: string
        averageRating:
          type: number
          format: double
        ratingCount:
          type: integer

    BookDetailResponse:
      allOf:
        - $ref: '#/components/schemas/BookResponse'
        - type: object
          properties:
            userRating:
              type: integer
              description: Current user's rating (if authenticated and rated)
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time

    BookPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BookResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        first:
          type: boolean
        last:
          type: boolean

    CategoryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        slug:
          type: string
        bookCount:
          type: integer

    BookRatingResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        rating:
          type: integer
        review:
          type: string
        user:
          type: object
          properties:
            id:
              type: integer
              format: int64
            firstName:
              type: string
            lastName:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    RatingPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/BookRatingResponse'
              - type: object
                properties:
                  book:
                    $ref: '#/components/schemas/BookResponse'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        first:
          type: boolean
        last:
          type: boolean

    UserProfileResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        emailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        lastLoginAt:
          type: string
          format: date-time